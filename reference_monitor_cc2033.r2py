"""
This security layer inadequately handles A/B storage for files in RepyV2.
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      if not self.Afile.readat(None,0):
        self.Afile.writeat('SE',0)
    else:
      if filename+'.a' in listfiles():
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,True)
  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    try:
      self.Bfile.writeat(data,offset)
    except:
      pass
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)
  def close(self):
    fileContent = self.Bfile.readat(None,0)
    if len(fileContent):
      firstChar = fileContent[0]
      lastChar = fileContent.strip()[-1]
      if firstChar=="S" and lastChar=="E":
        self.Afile.writeat(fileContent,0)
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Bfn)
def ABopenfile(filename, create):
  return ABFile(filename,create)
# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }
CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()


#
# Assignment sample attack code added here
#
###if "testfile.txt.a" in listfiles():
###  removefile("testfile.txt.a")
###if "testfile.txt.b" in listfiles():
###  removefile("testfile.txt.b")
###myfile=ABopenfile("testfile.txt",True)  #Create an AB file

# I should get 'SE' when reading an empty file...
###assert('SE' == myfile.readat(None,0))

# put some valid data in the file.
###myfile.writeat("Stest12345E",0)

# I should still get 'SE' because the file wasn't closed.
###assert('SE' == myfile.readat(None,0))

#Close the file
###myfile.close()
