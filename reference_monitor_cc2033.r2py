"""
This security layer inadequately handles A/B storage for files in RepyV2.
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    ** instructed to delete this?  it's in comments? -- python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    -->edited as shown on zoom -- python3 repy.py encasementlib.r2py reference_monitor_cc2033.r2py attack_layer_1cc2033.r2py 
""" 
    # * Test if the AB file can correctly handle writes past at the end of the file so, like we said, we have this offset, right um.
    # Q: What happens if your offset is greater than your file length does your program out crash if that's the case, 
    # or do you handle it gracefully quietly and just not allow them to write to a portion of the file that doesn't exist or read, etc.
    # Tests if the Avi file class can correctly keep track of file length.
    # Tests if the ab file class can successfully open and right valid data, so this is testing whether or not., An invalid right makes it through the A file or, 
    #   Or if a valid right doesn't make it through the A file etc there's also a lot of people have issues on this because there's it's the first time that.
    #    people realize that you can open a file with create twice, with creat equals True twice.
    #  Gradescope says IACOR -- test is trying to Initiate a file, then Append to the file, then Close the file, then Open again, then Read it 
    #  There it is um nexus test if the Avi file can handle invalid rights properly right similar to valid rights, 
    #     test if the Avi file can handle multiple valid rights so multiple valid things are called and written to the file.
    # Test to see if the Avi file class can properly handle rights, starting with a space, so we say that the first byte in order to be considered valid
    #   must be capital S and last byte must be capital E it's important that we say byte here and not letter. 
    # test of the Avi file can correctly handle resource contention during threading well in this case you have multiple threads attempting to write to and 
    #    read from the same file, as I stated before, only one thread will own the file, at a time, if a thread owns a file all other threads must wait 
    #    until that thread closes the file before it's allowed to access it.
    # And then finally test if the AB file class can successfully right valid data to an existing file so basically it's going to create a file
    #    close that file reopen it and then try to write valid data.
    # Those are the 10 test cases there's another one in there that's test the base case provided in the assignment description so literally does your code 
    #  run with the test case that's in the assignment description.  Plus the -10 value to avoid cheating autograder

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  # log listfiles()                                   # added to determine what files exist if any, need to add decision tree below this
  # files = os.listdir()
  # log (files)
  def __init__(self,filename,create):               # 2 parms passed from the programmer - application
    #log("running __init__")
    listfiles()                                      # added to determine what files exist if any, need to add decision tree below this
    # globals                                       need to check on init whether files exist - can use listfiles()
    mycontext['debug'] = False   
    mycontext['lock'] = createlock()    ## ADDED v1
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'                        # self.Afn & self.Bfn are only the file names
    self.Bfn = filename+'.b'
    ##  mycontext['lock'].acquire(True)   ## ADDED v1

    # make the files and add 'SE' to the readat file...
    
    mycontext['lock'].acquire(True)

    if create:
        self.original = openfile(filename,create)
        if self.Afn in listfiles():     
            removefile (self.Afn)
        if self.Bfn in listfiles():     
            removefile (self.Bfn)
            
        self.Afile = openfile(self.Afn,create)        # self.Afile and self.Bfile contain the objects of self.Afn and self.Bfn to read from and write to 
        self.Bfile = openfile(self.Bfn,create)
        original_text = self.original.readat(None,0)
        self.Afile.writeat(original_text,0)
        self.Bfile.writeat(original_text,0)
        if (len(original_text) <= 2):     ## ADDED v1  -- not needed
            self.Afile.writeat('SE',0)
    else:                                       # added else 3 lines to open when the init create is False
        if filename in listfiles():
            self.original = openfile(filename,create)
            if self.Afn in listfiles():     
                removefile (self.Afn)
            if self.Bfn in listfiles():     
                removefile (self.Bfn)

            self.Afile = openfile(self.Afn,True)        # self.Afile and self.Bfile contain the objects of self.Afn and self.Bfn to read from and write to 
            self.Bfile = openfile(self.Bfn,True)
            original_text = self.original.readat(None,0)
            self.Afile.writeat(original_text,0)
            self.Bfile.writeat(original_text,0)
            if (len(original_text(None,0)) <= 2):     ## ADDED v1  -- not needed
                self.Afile.writeat('SE',0)
        
            ## self.Afile = openfile(self.Afn,False)
            ## self.Bfile = openfile(self.Bfn,False)
        else:
            pass   ## what if user provides non-exist filename and create = false?
    mycontext['lock'].release()

  def writeat(self,data,offset):    

    ##    if offset.writeat >=0 and offset <= len(self.Bfile)
    if offset >=0 and offset <= len(self.Bfile.readat(None,0)) and type(data) == str:
       # Write the requested data to the B file using the sandbox's writeat call
       mycontext['lock'].acquire(True)
          ## self.lock.acquire(True)
       self.Bfile.writeat(data,offset)
          ## self.lock.release(True)
       mycontext['lock'].release()
       
       
  def readat(self,bytes,offset):
      mycontext['lock'].acquire(True)
      # Read from the A file using the sandbox's readat...
      if (type(bytes) == int and bytes < 0) or not (type(bytes)==int or bytes is None) or not (type(offset) == int) or offset < 0 or offset > len(self.Afile.readat(None,0)):
        mycontext['lock'].release()
        return ""   
      Afile_text = self.Afile.readat(bytes,offset)
      mycontext['lock'].release()
      return Afile_text

      ##if self.Afile[0] == 'S' and self.Afile[-1] == 'E'       # added this line to check validity of A file
      ## pass
          ## self.lock = createlock()    #Set the Lock to Blocking
          ## self.lock.acquire(True)      # Check the offset and len validation 
      length = len(self.Afile.readat(None,0))
      if offset < 0 or length < 0:
         raise RepyArgumentError
         mycontext['lock'].release()
         ## self.lock.release()
      elif offset >= len(self.Afile.readat(None,0)):
         raise SeekPastEndOfFile
         Errorself.lock.release()
      elif bytes > length and bytes != None:
         raise SeekPastEndOfFileError
         self.lock.release()
      elif (len(self.Afile.readat(None,0)) < offset+length) and bytes != None:
         raise RepyArgumentErrorself.lock.release()
      else:
         #Try Reading the File else raise Exception
         try:
            read_data = self.Afile.readat(bytes,offset)
            self.lock.release()
            return read_data
         except:
            raise RepyArgumentError

  def close(self):
    mycontext['lock'].acquire(True)
    Bfile_content = self.Bfile.readat(None,0)
    ## Bfile_content = self.Bfile.read()
    if len(Bfile_content) >= 2 and Bfile_content[0] == 'S' and Bfile_content[-1] == 'E':
        self.original.writeat(Bfile_content,0)   ## potentially extraneous bytes at orig EOF
    self.original.close()
    self.Afile.close()
    self.Bfile.close()
    mycontext['lock'].release()

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }


CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()

#
# Assignment sample attack code added here to eliminate need for two input files
#
###if "testfile.txt.a" in listfiles():
###  removefile("testfile.txt.a")
###if "testfile.txt.b" in listfiles():
###  removefile("testfile.txt.b")
###myfile=ABopenfile("testfile.txt",True)  #Create an AB file

# I should get 'SE' when reading an empty file...
###assert('SE' == myfile.readat(None,0))

# put some valid data in the file.
###myfile.writeat("Stest12345E",0)

# I should still get 'SE' because the file wasn't closed.
###assert('SE' == myfile.readat(None,0))

#Close the file
###myfile.close()
